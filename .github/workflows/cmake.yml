name: CMake

on:
  push:
    branches: [ "main", "actions-test" ]
  pull_request:
    branches: [ "main", "actions-test" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Get Conan
      uses: turtlebrowser/get-conan@main
      
    - name: Create default profile
      run: conan profile detect --force
      
    - name: Update Conan profile for C++ 20
      #run: conan profile update settings.compiler.libcxx=libstdc++20 settings.compiler.cppstd=20 default
      run: |
        conan_profile_path=$(conan profile path default)
        sed -i "s/^compiler.cppstd=.*/compiler.cppstd=20/" "$conan_profile_path"
        conan profile show
      
    - name: Install dependencies
      #run: conan install . -s build_type=${{env.BUILD_TYPE}} --install-folder=${{github.workspace}}/build
      run: sudo conan install . --output-folder=build --build=missing -c tools.system.package_manager:mode=install
      
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
    
    #- name: Test
    #  working-directory: ${{github.workspace}}/build
    #  # Execute tests defined by the CMake configuration.
    #  # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #  run: ctest -C ${{env.BUILD_TYPE}}

